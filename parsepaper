#!/usr/bin/ruby
#parsepaper.rb

#Benedikt Terhechte (stylemac.com)

require 'optparse'


#extend string to have mgsub
class String
  def mgsub(key_value_pairs=[].freeze)
    regexp_fragments = key_value_pairs.collect { |k,v| k }
    gsub(Regexp.union(*regexp_fragments)) do |match|
           key_value_pairs.detect{|k,v| k =~ match}[1]
    end
  end
end

#parse our arguments
class ParseArguments < Hash
  def initialize(args)
    super()
    self[:commit_message] = ''
    self[:mode] = :auto
    self[:ticket_numbers] = nil
    self[:force] = false
    self[:taskpaper_file] = 'todo.taskpaper'
    self[:added_files_only] = false

    self[:possible_modes] = [:decorate, :commit, :status, :auto]

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #$0 (decorate|commit|status|auto) [options]\
      decorate: add ticket numbers to the taskpaper file
      commit: take all tasks that are @done and commit them
      status: show what would be commited
      auto: first decorate the file, then if something is done, commit it."

      opts.on('-m', '--message [STRING]', 'add commit message [STRING]') do |string|
        self[:commit_message] = string || ""
      end

      opts.on('--tickets x,y,z', Array, 'list of tickets to commit') do |list|
        self[:ticket_numbers] = list.collect{ |ticket| 
          if ticket =~ /^\#/:
            ticket.gsub(/^\#/,'')
          end
        }
      end

      opts.on('-t', '--taskpaper [TASKPAPERFILE]', 'chose a custom taskpaper file. default is todo.taskpaper') do |string|
        self[:taskpaper_file] = string 
      end

      opts.on('-a', '--addedfiles', 'just commit the files that have been added manually through git add') do |string|
        self[:added_files_only] = true
      end

      opts.on('-f', '--force', 'in auto mode, force commit, and do not ask for approval') do
        self[:force] = true
      end

      opts.on('-h', '--help', 'display this help and exit') do
        puts opts
        exit
      end

    end

    #first, parse the arguments
    opts.parse!(args)

    #check if the actual mode is known
    if args.size>1
      puts "Please provide only one mode"
      puts opts
      exit
    end

    if args.size==0
      puts "Please provide a mode"
      puts opts
      exit
    end
    mode = args.first

    if self[:possible_modes].index(mode.to_sym).nil?
        puts "Unknown mode #{mode}"
        puts opts
        exit
    end
    self[:mode] = mode.to_sym
 end
end

class Task
  #get information about this line, i.e. is it done, does it have a ticket, etc
  attr_accessor :ticket, :line, :done, :whitespace, :project
  #we want to have ? accessors
  alias_method :done?, :done
  alias_method :whitespace?, :whitespace
  alias_method :project?, :project
  def initialize(line)
    @line = line.chomp
    @ticket = nil
    if /\#[0-9]{1,4}/.match(@line)
      @ticket = /\#([0-9]{1,4})/.match(@line)[1]
      # and remove the ticket from the line. we will add it again later on
      # this means that tickes are always at the end of the line, which is
      # expected behaviour / a feature
      @line.gsub!(/\ ?\#([0-9]{1,4})/, "")
    end
    @done =  !/\@done/i.match(@line).nil?

    @project = @line[-1,1]==":"

    @whitespace =  @line.size<=1
  end

  def decoratedLine
    #decorate the line with the ticket
    if @ticket.nil?
      return @line
    else
      return "#{@line} \##{@ticket}"
    end
  end

  def ticket?
    return @ticket!=nil
  end

  def description
    # return the descrition of this ticket
    # means, we strip the - and the done
    desc = "Ticket: #{@ticket}\t\tStatus: #{'Done' if @done}"
    return desc << "\n " << @line.mgsub([[/^\W*\-/, ""], [/\ ?\@done/i, ""]]) 
  end

end

class Parsepaper
  def initialize(arguments)
    @args = arguments
    
    # Check if the taskpaper_file exists.
    if !File.file? @args[:taskpaper_file]
      puts "Couldn't find #{@args[:taskpaper_file]}"
      exit
    end
    
    self.readTickets
    
    #and see what we should do...
    if not self.respond_to?(@args[:mode].to_s)
      puts "Unknown action: " << @args[:mode].to_s
    end
  end

  def readTickets
    # Read the file, fill the ticket numbers, create the dict, and the array
    @lines = []
    #this contains all the tickets in the file, so we don't issue a ticket twice
    @tickets = {}
    
    open(@args[:taskpaper_file]).each{ |line|
      #if the line just contains whitespace or just a -, just add it
      taskInstance = Task.new(line)
      if taskInstance.ticket?
        @tickets[taskInstance.ticket] = taskInstance
      end
      @lines << taskInstance
    }
  end

  def run
    self.send(@args[:mode].to_s)
  end

  #generate a ticket
  def generateTicket
    #tickets have 4 numbers
    begin
      number = "#{rand(9999)}"
    end while not @tickets.index(number).nil?
    return number.strip
  end

  #generate an array of all changes that would be commited
  def arrayOfChanges
    #we could also use Ruby/Git here, but that feels like an overkill right #now.
    gitChanges = `git diff #{@args[:taskpaper_file]} | grep '^\+' | grep -i '\@done'`
    return gitChanges.split("\n").collect{ |line| Task.new(line.gsub(/^\+\ ?/, ""))}
  end

  def save
    #and write the outputlines back into the file.
    open(@args[:taskpaper_file], 'w') do |file|
      @lines.each{ |taskInstance| file << taskInstance.decoratedLine << "\n" } 
    end
  end

  def decorate
    # Run through the file, one line at a time, and decorate it, if
    @lines.each{ |ti|
      if !ti.whitespace? and !ti.project? and !ti.done? and !ti.ticket?
        ticket = self.generateTicket
        ti.ticket = ticket
        @tickets[ti.ticket] = ti
      end
    }
    self.save
  end

  def status
    puts "The following changes would be commited"
    puts ""
    self.arrayOfChanges.each{ |ti|
      puts ti.description << "\n\n"
    }
  end

  def commit
    #if we have additional commit info, we append it
    commitMessage = @args[:commit_message].size>0 ? @args[:commit_message] + "\n\n" : ""

    #if we're only allowed to cmmit sommit tickets, we need to prepare that here.
    allTickets = @args[:ticket_numbers].nil?

    self.arrayOfChanges.each{ |ti|
      next if not allTickets and @args[:ticket_numbers].index(ti.ticket).nil?
      commitMessage << ti.description << "\n"
    }

    if @args[:added_files_only]
      command = '/usr/bin/env git commit --file=-'
    else
      command = '/usr/bin/env git commit -a --file=-'
    end

    result = nil
    IO.popen(command, mode='r+') do |io| 
      io.write commitMessage
      io.close_write # let the process know you've given it all the data 
      result = io.read 
    end

    if result.nil?
      puts "Error, couldn't commit"
      exit
    end

    puts "Git said: " << result

  end

  def auto
    #auto mode is pretty easy and operates on the well establised modes above
    #it should be the default since it offers the least possibilities of 
    #shooting yourself into the foot.

    #before we do anything, we decorate, so that all the new tickets get a valid number.
    self.decorate

    #after this, we need to read the tickets again.
    self.readTickets

    if self.arrayOfChanges.size == 0
      puts "No changes to commit"
      exit
    end

    # then we show the user what we want to do, if he lets us.
    if not @args[:force]
      puts "Commit Preview:"
      self.status

      print "Proceed? (y/n) "
      answer = $stdin.gets

      # default is y
      if answer.strip == "n"
        exit
      end
    end

    # now, that we're done, we can commit
    self.commit
  end
end


# Finally, run the script

# Parse the commandline
args = ParseArguments.new(ARGV)

# Hand the options to the parser
parsePaper = Parsepaper.new(args)

# Run it
parsePaper.run

